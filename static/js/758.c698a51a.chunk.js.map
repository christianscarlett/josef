{"version":3,"file":"static/js/758.c698a51a.chunk.js","mappings":"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","sources":["../node_modules/is-any-array/src/index.ts","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-distance-euclidean/lib-es6/euclidean.js","../node_modules/ml-kmeans/src/KMeansResult.ts","../node_modules/ml-kmeans/src/assert.ts","../node_modules/ml-matrix/matrix.mjs","../node_modules/ml-xsadd/lib-es6/xsadd.js","../node_modules/ml-random/lib-es6/choice.js","../node_modules/ml-random/lib-es6/index.js","../node_modules/ml-kmeans/src/initialization.ts","../node_modules/ml-kmeans/src/kmeans.ts","../node_modules/ml-kmeans/src/utils.ts","../node_modules/ml-matrix/matrix.js","../node_modules/ml-nearest-vector/lib-es6/index.js"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n\nexport type AnyArray =\n  | any[] // eslint-disable-line @typescript-eslint/no-explicit-any\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value: unknown): value is AnyArray {\n  const tag = toString.call(value);\n  return tag.endsWith('Array]') && !tag.includes('Big');\n}\n","import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n","export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n","import { updateClusterID } from './utils';\n\nexport interface CentroidWithInformation {\n  centroid: number[];\n  error: number;\n  size: number;\n}\nexport class KMeansResult {\n  /**\n   * Result of the kmeans algorithm\n   * @param clusters - the cluster identifier for each data dot\n   * @param centroids - the K centers in format [x,y,z,...], the error and size of the cluster\n   * @param converged - Converge criteria satisfied\n   * @param iterations - Current number of iterations\n   * @param distance - Distance function to use between the points\n   * @constructor\n   */\n\n  public clusters: number[];\n  public centroids: number[][];\n  public converged: boolean;\n  public iterations: number;\n  public distance: (a: number[], b: number[]) => number;\n  constructor(\n    clusters: number[],\n    centroids: number[][],\n    converged: boolean,\n    iterations: number,\n    distance: (a: number[], b: number[]) => number,\n  ) {\n    this.clusters = clusters;\n    this.centroids = centroids;\n    this.converged = converged;\n    this.iterations = iterations;\n    this.distance = distance;\n  }\n\n  /**\n   * Allows to compute for a new array of points their cluster id\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {Array<number>} - cluster id for each point\n   */\n  nearest(data: number[][]): number[] {\n    const clusterID = new Array<number>(data.length);\n    return updateClusterID(data, this.centroids, clusterID, this.distance);\n  }\n\n  /**\n   * Returns the error and size of each cluster\n   * @ignore\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {KMeansResult}\n   */\n  computeInformation(data: number[][]): CentroidWithInformation[] {\n    let enrichedCentroids = this.centroids.map((centroid) => {\n      return {\n        centroid,\n        error: 0,\n        size: 0,\n      };\n    });\n\n    for (let i = 0; i < data.length; i++) {\n      enrichedCentroids[this.clusters[i]].error += this.distance(\n        data[i],\n        this.centroids[this.clusters[i]],\n      );\n      enrichedCentroids[this.clusters[i]].size++;\n    }\n\n    for (let j = 0; j < this.centroids.length; j++) {\n      let error = enrichedCentroids[j].error;\n      if (enrichedCentroids[j].size && error !== -1) {\n        error /= enrichedCentroids[j].size;\n      } else {\n        enrichedCentroids[j].error = -1;\n      }\n    }\n\n    return enrichedCentroids;\n  }\n}\n","export function assertUnreachable(x: never, message: string): never {\n  throw new Error(`${message}: \"${String(x)}\"`);\n}\n\nexport function validateKmeansInput(data: number[][], K: number) {\n  if (K <= 0 || K > data.length || !Number.isInteger(K)) {\n    throw new Error(\n      'K should be a positive integer smaller than the number of points',\n    );\n  }\n}\n","import * as matrix from './matrix.js';\n\nexport const AbstractMatrix = matrix.AbstractMatrix;\nexport const CHO = matrix.CHO;\nexport const CholeskyDecomposition = matrix.CholeskyDecomposition;\nexport const EVD = matrix.EVD;\nexport const EigenvalueDecomposition = matrix.EigenvalueDecomposition;\nexport const LU = matrix.LU;\nexport const LuDecomposition = matrix.LuDecomposition;\nexport const Matrix = matrix.Matrix;\nexport const MatrixColumnSelectionView = matrix.MatrixColumnSelectionView;\nexport const MatrixColumnView = matrix.MatrixColumnView;\nexport const MatrixFlipColumnView = matrix.MatrixFlipColumnView;\nexport const MatrixFlipRowView = matrix.MatrixFlipRowView;\nexport const MatrixRowSelectionView = matrix.MatrixRowSelectionView;\nexport const MatrixRowView = matrix.MatrixRowView;\nexport const MatrixSelectionView = matrix.MatrixSelectionView;\nexport const MatrixSubView = matrix.MatrixSubView;\nexport const MatrixTransposeView = matrix.MatrixTransposeView;\nexport const NIPALS = matrix.NIPALS;\nexport const Nipals = matrix.Nipals;\nexport const QR = matrix.QR;\nexport const QrDecomposition = matrix.QrDecomposition;\nexport const SVD = matrix.SVD;\nexport const SingularValueDecomposition = matrix.SingularValueDecomposition;\nexport const WrapperMatrix1D = matrix.WrapperMatrix1D;\nexport const WrapperMatrix2D = matrix.WrapperMatrix2D;\nexport const correlation = matrix.correlation;\nexport const covariance = matrix.covariance;\nexport default matrix.default.Matrix ? matrix.default.Matrix : matrix.Matrix;\nexport const determinant = matrix.determinant;\nexport const inverse = matrix.inverse;\nexport const linearDependencies = matrix.linearDependencies;\nexport const pseudoInverse = matrix.pseudoInverse;\nexport const solve = matrix.solve;\nexport const wrap = matrix.wrap;\n","const LOOP = 8;\nconst FLOAT_MUL = 1 / 16777216;\nconst sh1 = 15;\nconst sh2 = 18;\nconst sh3 = 11;\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    const nhi = n - nlo;\n    return (((nhi * m) >>> 0) + nlo * m) >>> 0;\n}\nexport default class XSadd {\n    constructor(seed = Date.now()) {\n        this.state = new Uint32Array(4);\n        this.init(seed);\n        this.random = this.getFloat.bind(this);\n    }\n    /**\n     * Returns a 32-bit integer r (0 <= r < 2^32)\n     */\n    getUint32() {\n        this.nextState();\n        return (this.state[3] + this.state[2]) >>> 0;\n    }\n    /**\n     * Returns a floating point number r (0.0 <= r < 1.0)\n     */\n    getFloat() {\n        return (this.getUint32() >>> 8) * FLOAT_MUL;\n    }\n    init(seed) {\n        if (!Number.isInteger(seed)) {\n            throw new TypeError('seed must be an integer');\n        }\n        this.state[0] = seed;\n        this.state[1] = 0;\n        this.state[2] = 0;\n        this.state[3] = 0;\n        for (let i = 1; i < LOOP; i++) {\n            this.state[i & 3] ^=\n                (i +\n                    multiply_uint32(1812433253, this.state[(i - 1) & 3] ^ ((this.state[(i - 1) & 3] >>> 30) >>> 0))) >>>\n                    0;\n        }\n        this.periodCertification();\n        for (let i = 0; i < LOOP; i++) {\n            this.nextState();\n        }\n    }\n    periodCertification() {\n        if (this.state[0] === 0 &&\n            this.state[1] === 0 &&\n            this.state[2] === 0 &&\n            this.state[3] === 0) {\n            this.state[0] = 88; // X\n            this.state[1] = 83; // S\n            this.state[2] = 65; // A\n            this.state[3] = 68; // D\n        }\n    }\n    nextState() {\n        let t = this.state[0];\n        t ^= t << sh1;\n        t ^= t >>> sh2;\n        t ^= this.state[3] << sh3;\n        this.state[0] = this.state[1];\n        this.state[1] = this.state[2];\n        this.state[2] = this.state[3];\n        this.state[3] = t;\n    }\n}\n","const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n    const { size = 1, replace = false, probabilities } = options;\n    let valuesArr;\n    let cumSum;\n    if (typeof values === 'number') {\n        valuesArr = getArray(values);\n    }\n    else {\n        valuesArr = values.slice();\n    }\n    if (probabilities) {\n        if (!replace) {\n            throw new Error('choice with probabilities and no replacement is not implemented');\n        }\n        // check input is sane\n        if (probabilities.length !== valuesArr.length) {\n            throw new Error('the length of probabilities option should be equal to the number of choices');\n        }\n        cumSum = [probabilities[0]];\n        for (let i = 1; i < probabilities.length; i++) {\n            cumSum[i] = cumSum[i - 1] + probabilities[i];\n        }\n        if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n            throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n        }\n    }\n    if (replace === false && size > valuesArr.length) {\n        throw new Error('size option is too large');\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const index = randomIndex(valuesArr.length, random, cumSum);\n        result.push(valuesArr[index]);\n        if (!replace) {\n            valuesArr.splice(index, 1);\n        }\n    }\n    return result;\n}\nfunction getArray(n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n    const rand = random();\n    if (!cumSum) {\n        return Math.floor(rand * n);\n    }\n    else {\n        let idx = 0;\n        while (rand > cumSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }\n}\nexport default randomChoice;\n","// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n    /**\n     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n     */\n    constructor(seedOrRandom = Math.random) {\n        if (typeof seedOrRandom === 'number') {\n            const xsadd = new XSAdd(seedOrRandom);\n            this.randomGenerator = xsadd.random;\n        }\n        else {\n            this.randomGenerator = seedOrRandom;\n        }\n    }\n    choice(values, options) {\n        if (typeof values === 'number') {\n            return choice(values, options, this.randomGenerator);\n        }\n        return choice(values, options, this.randomGenerator);\n    }\n    /**\n     * Draw a random number from a uniform distribution on [0,1)\n     * @return The random number\n     */\n    random() {\n        return this.randomGenerator();\n    }\n    /**\n     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n     * @param low - The lower bound of the uniform distribution interval.\n     * @param high - The higher bound of the uniform distribution interval.\n     */\n    randInt(low, high) {\n        if (high === undefined) {\n            high = low;\n            low = 0;\n        }\n        return low + Math.floor(this.randomGenerator() * (high - low));\n    }\n    /**\n     * Draw several random number from a uniform distribution on [0, 1)\n     * @param size - The number of number to draw\n     * @return - The list of drawn numbers.\n     */\n    randomSample(size) {\n        const result = [];\n        for (let i = 0; i < size; i++) {\n            result.push(this.random());\n        }\n        return result;\n    }\n}\n","import { squaredEuclidean } from 'ml-distance-euclidean';\nimport { Matrix } from 'ml-matrix';\nimport Random from 'ml-random';\n\n/**\n * Choose K different random points from the original data\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function random(data: number[][], K: number, seed?: number) {\n  const random = new Random(seed);\n  return random.choice(data, { size: K });\n}\n\n/**\n * Chooses the most distant points to a first random pick\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {Array<Array<number>>} distanceMatrix - matrix with the distance values\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function mostDistant(\n  data: number[][],\n  K: number,\n  distanceMatrix: number[][],\n  seed?: number,\n): number[][] {\n  const random = new Random(seed);\n  let ans = new Array<number>(K);\n  // chooses a random point as initial cluster\n  ans[0] = Math.floor(random.random() * data.length);\n\n  if (K > 1) {\n    // chooses the more distant point\n    let maxDist = { dist: -1, index: -1 };\n    for (let l = 0; l < data.length; ++l) {\n      if (distanceMatrix[ans[0]][l] > maxDist.dist) {\n        maxDist.dist = distanceMatrix[ans[0]][l];\n        maxDist.index = l;\n      }\n    }\n    ans[1] = maxDist.index;\n\n    if (K > 2) {\n      // chooses the set of points that maximises the min distance\n      for (let k = 2; k < K; ++k) {\n        let center = { dist: -1, index: -1 };\n        for (let m = 0; m < data.length; ++m) {\n          // minimum distance to centers\n          let minDistCent = { dist: Number.MAX_VALUE, index: -1 };\n          for (let n = 0; n < k; ++n) {\n            if (distanceMatrix[n][m] < minDistCent.dist && !ans.includes(m)) {\n              minDistCent = {\n                dist: distanceMatrix[n][m],\n                index: m,\n              };\n            }\n          }\n\n          if (\n            minDistCent.dist !== Number.MAX_VALUE &&\n            minDistCent.dist > center.dist\n          ) {\n            center = { ...minDistCent };\n          }\n        }\n\n        ans[k] = center.index;\n      }\n    }\n  }\n\n  return ans.map((index) => data[index]);\n}\n\ninterface Options {\n  seed: number;\n  localTrials: number;\n}\n\n// Implementation inspired from scikit\nexport function kmeanspp(\n  X: number[][],\n  K: number,\n  options: Partial<Options> = {},\n) {\n  const m = new Matrix(X);\n  const nSamples = m.rows;\n  const random = new Random(options.seed);\n\n  // Set the number of trials\n  const centers: number[][] = [];\n  const localTrials = options.localTrials || 2 + Math.floor(Math.log(K));\n\n  // Pick the first center at random from the dataset\n  const firstCenterIdx = random.randInt(nSamples);\n  centers.push(m.getRow(firstCenterIdx));\n\n  // Init closest distances\n  let closestDistSquared = new Matrix(1, m.rows);\n  for (let i = 0; i < m.rows; i++) {\n    closestDistSquared.set(0, i, squaredEuclidean(m.getRow(i), centers[0]));\n  }\n  let cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n  const factor = 1 / cumSumClosestDistSquared[0][nSamples - 1];\n  let probabilities: Matrix = Matrix.mul(closestDistSquared, factor);\n\n  // Iterate over the remaining centers\n  for (let i = 1; i < K; i++) {\n    const candidateIdx: number[] = random.choice(nSamples, {\n      replace: true,\n      size: localTrials,\n      probabilities: probabilities.getRow(0),\n    });\n\n    const candidates = m.selection(candidateIdx, range(m.columns));\n    const distanceToCandidates = euclideanDistances(candidates, m);\n\n    let bestCandidate = Infinity;\n    let bestPot = Infinity;\n    let bestDistSquared = closestDistSquared;\n\n    for (let j = 0; j < localTrials; j++) {\n      const newDistSquared = Matrix.min(closestDistSquared, [\n        distanceToCandidates.getRow(j),\n      ]);\n      const newPot = newDistSquared.sum();\n      if (newPot < bestPot) {\n        bestCandidate = candidateIdx[j];\n        bestPot = newPot;\n        bestDistSquared = newDistSquared;\n      }\n    }\n    centers[i] = m.getRow(bestCandidate);\n    closestDistSquared = bestDistSquared;\n    cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n    probabilities = Matrix.mul(\n      closestDistSquared,\n      1 / cumSumClosestDistSquared[0][nSamples - 1],\n    );\n  }\n  return centers;\n}\n\nfunction euclideanDistances(A: Matrix, B: Matrix) {\n  const result = new Matrix(A.rows, B.rows);\n  for (let i = 0; i < A.rows; i++) {\n    for (let j = 0; j < B.rows; j++) {\n      result.set(i, j, squaredEuclidean(A.getRow(i), B.getRow(j)));\n    }\n  }\n  return result;\n}\n\nfunction range(l: number): number[] {\n  let r: Array<number> = [];\n  for (let i = 0; i < l; i++) {\n    r.push(i);\n  }\n  return r;\n}\n\nfunction cumSum(arr: Array<number>): Array<number> {\n  let cumSum: Array<number> = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    cumSum[i] = cumSum[i - 1] + arr[i];\n  }\n  return cumSum;\n}\n","import { squaredEuclidean } from 'ml-distance-euclidean';\n\nimport { KMeansResult } from './KMeansResult';\nimport { assertUnreachable, validateKmeansInput } from './assert';\nimport { mostDistant, random, kmeanspp } from './initialization';\nimport {\n  updateClusterID,\n  updateCenters,\n  hasConverged,\n  calculateDistanceMatrix,\n} from './utils';\n\nconst defaultOptions = {\n  maxIterations: 100,\n  tolerance: 1e-6,\n  initialization: 'kmeans++' as InitializationMethod,\n  distanceFunction: squaredEuclidean,\n};\n\n/**\n * Each step operation for kmeans\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} iterations - Current number of iterations\n * @return {KMeansResult}\n */\n\nexport type InitializationMethod = 'kmeans++' | 'random' | 'mostDistant';\nexport interface OptionsWithDefault {\n  distanceFunction?: (p: number[], q: number[]) => number;\n  tolerance?: number;\n  initialization?: InitializationMethod | number[][];\n  maxIterations?: number;\n}\n\nexport interface OptionsWithoutDefault {\n  seed?: number;\n}\n\nexport type Options = OptionsWithDefault & OptionsWithoutDefault;\ntype DefinedOptions = Required<OptionsWithDefault> & OptionsWithoutDefault;\n\nfunction step(\n  centers: number[][],\n  data: number[][],\n  clusterID: number[],\n  K: number,\n  options: DefinedOptions,\n  iterations: number,\n): KMeansResult {\n  clusterID = updateClusterID(\n    data,\n    centers,\n    clusterID,\n    options.distanceFunction,\n  );\n  let newCenters: number[][] = updateCenters(centers, data, clusterID, K);\n  let converged = hasConverged(\n    newCenters,\n    centers,\n    options.distanceFunction,\n    options.tolerance,\n  );\n  return new KMeansResult(\n    clusterID,\n    newCenters,\n    converged,\n    iterations,\n    options.distanceFunction,\n  );\n}\n\n/**\n * Generator version for the algorithm\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n */\nexport function* kmeansGenerator(\n  data: number[][],\n  K: number,\n  options: Options,\n) {\n  const definedOptions = getDefinedOptions(options);\n  validateKmeansInput(data, K);\n  let centers = initializeCenters(data, K, definedOptions);\n  let clusterID: number[] = new Array(data.length);\n\n  let converged = false;\n  let stepNumber = 0;\n  let stepResult;\n  while (!converged && stepNumber < definedOptions.maxIterations) {\n    stepResult = step(\n      centers,\n      data,\n      clusterID,\n      K,\n      definedOptions,\n      ++stepNumber,\n    );\n    yield stepResult;\n    converged = stepResult.converged;\n    centers = stepResult.centroids;\n  }\n}\n\n/**\n * K-means algorithm\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} [options.maxIterations = 100] - Maximum of iterations allowed\n * @param {number} [options.tolerance = 1e-6] - Error tolerance\n * @param {function} [options.distanceFunction = squaredDistance] - Distance function to use between the points\n * @param {number} [options.seed] - Seed for random initialization.\n * @param {string|Array<Array<number>>} [options.initialization = 'kmeans++'] - K centers in format [x,y,z,...] or a method for initialize the data:\n *  * You can either specify your custom start centroids, or select one of the following initialization method:\n *  * `'kmeans++'` will use the kmeans++ method as described by http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf\n *  * `'random'` will choose K random different values.\n *  * `'mostDistant'` will choose the more distant points to a first random pick\n * @return {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:\n *  * `'clusters'`: Array of indexes for the clusters.\n *  * `'centroids'`: Array with the resulting centroids.\n *  * `'iterations'`: Number of iterations that took to converge\n */\nexport function kmeans(data: number[][], K: number, options: Options) {\n  const definedOptions = getDefinedOptions(options);\n\n  validateKmeansInput(data, K);\n  let centers = initializeCenters(data, K, definedOptions);\n\n  // infinite loop until convergence\n  if (definedOptions.maxIterations === 0) {\n    definedOptions.maxIterations = Number.MAX_VALUE;\n  }\n\n  let clusterID: number[] = new Array(data.length);\n  let converged = false;\n  let stepNumber = 0;\n  let stepResult;\n  while (!converged && stepNumber < definedOptions.maxIterations) {\n    stepResult = step(\n      centers,\n      data,\n      clusterID,\n      K,\n      definedOptions,\n      ++stepNumber,\n    );\n    converged = stepResult.converged;\n    centers = stepResult.centroids;\n  }\n  if (!stepResult) {\n    throw new Error('unreachable: no kmeans step executed');\n  }\n  return stepResult;\n}\n\nfunction initializeCenters(\n  data: number[][],\n  K: number,\n  options: DefinedOptions,\n) {\n  let centers: number[][];\n  if (Array.isArray(options.initialization)) {\n    if (options.initialization.length !== K) {\n      throw new Error('The initial centers should have the same length as K');\n    } else {\n      centers = options.initialization;\n    }\n  } else {\n    switch (options.initialization) {\n      case 'kmeans++':\n        centers = kmeanspp(data, K, options);\n        break;\n      case 'random':\n        centers = random(data, K, options.seed);\n        break;\n      case 'mostDistant':\n        centers = mostDistant(\n          data,\n          K,\n          calculateDistanceMatrix(data, options.distanceFunction),\n          options.seed,\n        );\n        break;\n      default:\n        assertUnreachable(\n          options.initialization,\n          'Unknown initialization method',\n        );\n    }\n  }\n  return centers;\n}\n\nfunction getDefinedOptions(options: Options): DefinedOptions {\n  return { ...defaultOptions, ...options };\n}\n","import nearestVector from 'ml-nearest-vector';\n\n/**\n * Calculates the distance matrix for a given array of points\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {function} distance - Distance function to use between the points\n * @return {Array<Array<number>>} - matrix with the distance values\n */\nexport function calculateDistanceMatrix(\n  data: number[][],\n  distance: (a: number[], b: number[]) => number,\n) {\n  let distanceMatrix: number[][] = new Array(data.length);\n  for (let i = 0; i < data.length; ++i) {\n    for (let j = i; j < data.length; ++j) {\n      if (!distanceMatrix[i]) {\n        distanceMatrix[i] = new Array(data.length);\n      }\n      if (!distanceMatrix[j]) {\n        distanceMatrix[j] = new Array(data.length);\n      }\n      const dist = distance(data[i], data[j]);\n      distanceMatrix[i][j] = dist;\n      distanceMatrix[j][i] = dist;\n    }\n  }\n  return distanceMatrix;\n}\n\n/**\n * Updates the cluster identifier based in the new data\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {function} distance - Distance function to use between the points\n * @return {Array} the cluster identifier for each data dot\n */\nexport function updateClusterID(\n  data: number[][],\n  centers: number[][],\n  clusterID: number[],\n  distance: (a: number[], b: number[]) => number,\n): number[] {\n  for (let i = 0; i < data.length; i++) {\n    clusterID[i] = nearestVector(centers, data[i], {\n      distanceFunction: distance,\n    });\n  }\n  return clusterID;\n}\n\n/**\n * Update the center values based in the new configurations of the clusters\n * @ignore\n * @param {Array<Array<number>>} prevCenters - Centroids from the previous iteration\n * @param {Array <Array <number>>} data - the [x,y,z,...] points to cluster\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @return {Array} he K centers in format [x,y,z,...]\n */\nexport function updateCenters(\n  prevCenters: number[][],\n  data: number[][],\n  clusterID: number[],\n  K: number,\n): number[][] {\n  const nDim = data[0].length;\n\n  // copy previous centers\n  let centers = new Array<number[]>(K);\n  let centersLen = new Array<number>(K);\n  for (let i = 0; i < K; i++) {\n    centers[i] = new Array<number>(nDim);\n    centersLen[i] = 0;\n    for (let j = 0; j < nDim; j++) {\n      centers[i][j] = 0;\n    }\n  }\n\n  // add the value for all dimensions of the point\n  for (let l = 0; l < data.length; l++) {\n    centersLen[clusterID[l]]++;\n    for (let dim = 0; dim < nDim; dim++) {\n      centers[clusterID[l]][dim] += data[l][dim];\n    }\n  }\n\n  // divides by length\n  for (let id = 0; id < K; id++) {\n    for (let d = 0; d < nDim; d++) {\n      if (centersLen[id]) {\n        centers[id][d] /= centersLen[id];\n      } else {\n        centers[id][d] = prevCenters[id][d];\n      }\n    }\n  }\n  return centers;\n}\n\n/**\n * The centers have moved more than the tolerance value?\n * @ignore\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} oldCenters - the K old centers in format [x,y,z,...]\n * @param {function} distanceFunction - Distance function to use between the points\n * @param {number} tolerance - Allowed distance for the centroids to move\n * @return {boolean}\n */\nexport function hasConverged(\n  centers: number[][],\n  oldCenters: number[][],\n  distanceFunction: (a: number[], b: number[]) => number,\n  tolerance: number,\n): boolean {\n  for (let i = 0; i < centers.length; i++) {\n    if (distanceFunction(centers[i], oldCenters[i]) > tolerance) {\n      return false;\n    }\n  }\n  return true;\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n","'use strict';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nconst defaultOptions = {\n    distanceFunction: squaredEuclidean\n};\nexport default function nearestVector(listVectors, vector, options = defaultOptions) {\n    const distanceFunction = options.distanceFunction || defaultOptions.distanceFunction;\n    const similarityFunction = options.similarityFunction || defaultOptions.similarityFunction;\n    let vectorIndex = -1;\n    if (typeof similarityFunction === 'function') {\n        // maximum similarity\n        let maxSim = Number.MIN_VALUE;\n        for (let j = 0; j < listVectors.length; j++) {\n            const sim = similarityFunction(vector, listVectors[j]);\n            if (sim > maxSim) {\n                maxSim = sim;\n                vectorIndex = j;\n            }\n        }\n    }\n    else if (typeof distanceFunction === 'function') {\n        // minimum distance\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < listVectors.length; i++) {\n            const dist = distanceFunction(vector, listVectors[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                vectorIndex = i;\n            }\n        }\n    }\n    else {\n        throw new Error(\"A similarity or distance function it's required\");\n    }\n    return vectorIndex;\n}\nexport function findNearestVector(vectorList, vector, options = defaultOptions) {\n    const index = nearestVector(vectorList, vector, options);\n    return vectorList[index];\n}\n"],"names":["toString","Object","prototype","isAnyArray","value","tag","call","endsWith","includes","rescale","input","output","options","arguments","length","undefined","TypeError","Array","currentMin","_options$fromIndex","fromIndex","_options$toIndex","toIndex","Number","isInteger","Error","minValue","i","min","currentMax","maxValue","max","RangeError","_options$min","autoMinMax","_options$max","factor","squaredEuclidean","p","q","d","KMeansResult","constructor","clusters","centroids","converged","iterations","distance","this","nearest","data","clusterID","updateClusterID","computeInformation","enrichedCentroids","map","centroid","error","size","j","assertUnreachable","x","message","concat","String","validateKmeansInput","K","matrix","LU","Matrix","QR","multiply_uint32","n","m","nlo","XSadd","seed","Date","now","state","Uint32Array","init","random","getFloat","bind","getUint32","nextState","periodCertification","t","randomIndex","cumSum","rand","idx","Math","floor","values","replace","probabilities","valuesArr","arr","push","getArray","slice","abs","result","index","splice","Random","seedOrRandom","xsadd","XSAdd","randomGenerator","choice","randInt","low","high","randomSample","mostDistant","distanceMatrix","ans","maxDist","dist","l","k","center","minDistCent","MAX_VALUE","kmeanspp","X","nSamples","rows","centers","localTrials","log","firstCenterIdx","getRow","closestDistSquared","set","cumSumClosestDistSquared","mul","candidateIdx","distanceToCandidates","euclideanDistances","selection","range","columns","bestCandidate","Infinity","bestPot","bestDistSquared","newDistSquared","newPot","sum","A","B","r","defaultOptions","maxIterations","tolerance","initialization","distanceFunction","step","newCenters","updateCenters","hasConverged","kmeans","definedOptions","getDefinedOptions","initializeCenters","stepResult","stepNumber","isArray","calculateDistanceMatrix","nearestVector","prevCenters","nDim","centersLen","dim","id","oldCenters","require","indent","repeat","indentData","inspectMatrixWithOptions","maxRows","maxColumns","maxNumSize","padMinus","name","maxI","maxJ","loop","get","line","formatNumber","join","inspectData","num","formatNumber2","padEnd","len","str","fix","toFixed","startsWith","exp","toExponential","checkRowIndex","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","checkColumnIndices","columnIndices","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","array","checkNonEmpty","isEmpty","AbstractMatrix","from1DArray","newRows","newColumns","newData","newMatrix","row","column","rowVector","columnVector","zeros","ones","fill","interval","round","eye","diag","matrix1","matrix2","checkMatrix","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","maxRow","pivot","setSubMatrix","neg","mulS","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","by","NaN","NEGATIVE_INFINITY","maxIndex","v","POSITIVE_INFINITY","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","type","sqrt","dot","cumulativeSum","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","y","r1","c1","r2","c2","embed","mat","cols","c","resultat","console","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","kroneckerSum","AxI","IxB","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","rowIndex","columnIndex","trace","sumByRow","sumByColumn","sumAll","product","productByRow","productByColumn","productAll","mean","variance","unbiased","sum1","sum2","varianceByRow","varianceByColumn","varianceAll","standardDeviation","centerByRow","centerByColumn","centerAll","scale","pow","getScaleByRow","scaleByRow","getScaleByColumn","scaleByColumn","divider","getScaleAll","scaleAll","Symbol","for","randomInt","diagonal","identity","negate","tensorProduct","nRows","nColumns","super","arrayData","every","element","from","removeRow","addRow","removeColumn","newRow","addColumn","addS","addM","subS","subM","subtract","subtractS","subtractM","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cos","cosh","expm1","fround","log1p","log10","log2","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","installMathOperations","BaseView","MatrixSelectionView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","LuDecomposition","LUcolj","kmax","lu","pivotVector","pivotSign","isSingular","col","solve","count","determinant","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","hypotenuse","QrDecomposition","qr","rdiag","nrm","Rdiag","isFullRank","orthogonalMatrix","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","e","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","condition","norm2","rank","tol","ii","leftSingularVectors","diagonalMatrix","leftHandSide","rightHandSide","useSVD","xrange","exception","dependenciesOneRow","thresholdValue","returnArray","EigenvalueDecomposition","assumeSymmetric","hh","tred2","dl1","c3","el1","s2","tst1","tql2","H","ort","orthes","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","z","iter","cdiv","hqr2","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","nipals","scaleScores","terminationCriteria","u","tOld","diff","counter","xResidual","residual","yResidual","betas","exports","xMatrix","yMatrix","yIsSame","sdx","sdy","corr","cov","subMatrix0","subMatrix1","subMatrix2","thresholdError","results","Abis","svdSolution","listVectors","similarityFunction","vectorIndex","maxSim","sim","minDist"],"sourceRoot":""}